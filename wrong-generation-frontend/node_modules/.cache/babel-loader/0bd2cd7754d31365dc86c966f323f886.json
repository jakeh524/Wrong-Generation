{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jakeherron/Desktop/wrong-generation/wrong-generation-frontend/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport InputForm from './components/InputForm';\nimport chartService from './services/charts';\n\nconst App = () => {\n  _s();\n\n  const [chartEntries, setChartEntries] = useState([]);\n  const [chartDate, setChartDate] = useState('');\n  const [newDay, setNewDay] = useState('');\n  const [newMonth, setNewMonth] = useState('');\n  const [newYear, setNewYear] = useState('');\n  const [length, setLength] = useState(10);\n\n  const handleDayChange = event => {\n    setNewDay(event.target.value);\n  };\n\n  const handleMonthChange = event => {\n    setNewMonth(event.target.value);\n  };\n\n  const handleYearChange = event => {\n    setNewYear(event.target.value);\n  };\n\n  const handleLengthChange = event => {\n    setLength(event.target.value);\n  };\n\n  const getNextDayOfWeek = (date, dayOfWeek) => {\n    let resultDate = new Date(date.getTime());\n    resultDate.setDate(date.getDate() + (7 + dayOfWeek - date.getDay()) % 7);\n    const month = (resultDate.getUTCMonth() + 1).toLocaleString('en-US', {\n      minimumIntegerDigits: 2,\n      useGrouping: false\n    });\n    const day = (resultDate.getUTCDate() - 1).toLocaleString('en-US', {\n      minimumIntegerDigits: 2,\n      useGrouping: false\n    });\n    const year = String(resultDate.getUTCFullYear());\n    const formattedDateString = year + '-' + month + '-' + day;\n    return formattedDateString;\n  };\n\n  const searchChart = event => {\n    event.preventDefault();\n    const formattedMonth = Number(newMonth).toLocaleString('en-US', {\n      minimumIntegerDigits: 2,\n      useGrouping: false\n    });\n    const formattedDay = Number(newDay).toLocaleString('en-US', {\n      minimumIntegerDigits: 2,\n      useGrouping: false\n    });\n    const formattedInputDate = new Date(`${newYear}-${formattedMonth}-${formattedDay}`);\n    const nextChartDate = getNextDayOfWeek(formattedInputDate, 6);\n    chartService.getChart(nextChartDate).then(returnedChart => {\n      setChartDate(returnedChart[0].date);\n      const filteredEntries = returnedChart[0].entries.filter(entry => entry.position <= length);\n      setChartEntries(filteredEntries);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Wrong Generation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n      searchChart: searchChart,\n      newDay: newDay,\n      newMonth: newMonth,\n      newYear: newYear,\n      length: length,\n      handleDayChange: handleDayChange,\n      handleMonthChange: handleMonthChange,\n      handleYearChange: handleYearChange,\n      handleLengthChange: handleLengthChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Showing Chart Data from \", chartDate]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: chartEntries.map(entry => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [entry.position, \". \", entry.song, \" by \", entry.artist]\n      }, entry.position, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"u2eLfNjAUCp7vFoyUvrGVrLSn6Y=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jakeherron/Desktop/wrong-generation/wrong-generation-frontend/src/App.js"],"names":["React","useState","InputForm","chartService","App","chartEntries","setChartEntries","chartDate","setChartDate","newDay","setNewDay","newMonth","setNewMonth","newYear","setNewYear","length","setLength","handleDayChange","event","target","value","handleMonthChange","handleYearChange","handleLengthChange","getNextDayOfWeek","date","dayOfWeek","resultDate","Date","getTime","setDate","getDate","getDay","month","getUTCMonth","toLocaleString","minimumIntegerDigits","useGrouping","day","getUTCDate","year","String","getUTCFullYear","formattedDateString","searchChart","preventDefault","formattedMonth","Number","formattedDay","formattedInputDate","nextChartDate","getChart","then","returnedChart","filteredEntries","entries","filter","entry","position","map","song","artist"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport InputForm from './components/InputForm'\nimport chartService from './services/charts'\n\nconst App = () => {\n  const [ chartEntries, setChartEntries ] = useState([])\n  const [ chartDate, setChartDate ] = useState('')\n  const [ newDay, setNewDay ] = useState('');\n  const [ newMonth, setNewMonth ] = useState('');\n  const [ newYear, setNewYear ] = useState('');\n  const [ length, setLength ] = useState(10);\n\n  const handleDayChange = (event) => {\n    setNewDay(event.target.value);\n  }\n  const handleMonthChange = (event) => {\n    setNewMonth(event.target.value);\n  }\n  const handleYearChange = (event) => {\n    setNewYear(event.target.value);\n  }\n  const handleLengthChange = (event) => {\n    setLength(event.target.value);\n  }\n\n  const getNextDayOfWeek = (date, dayOfWeek) => {\n    let resultDate = new Date(date.getTime());\n    resultDate.setDate(date.getDate() + (7 + dayOfWeek - date.getDay()) % 7);\n    const month = (resultDate.getUTCMonth() + 1).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping: false});\n    const day = (resultDate.getUTCDate() - 1).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping: false});\n    const year = String(resultDate.getUTCFullYear());\n    const formattedDateString = year + '-' + month + '-' + day;\n    return formattedDateString;\n  }\n\n  const searchChart = (event) => {\n    event.preventDefault();\n    const formattedMonth = (Number(newMonth)).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping: false});\n    const formattedDay = (Number(newDay)).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping: false});\n    const formattedInputDate = new Date(`${newYear}-${formattedMonth}-${formattedDay}`);\n    const nextChartDate = getNextDayOfWeek(formattedInputDate, 6);\n    \n    chartService\n      .getChart(nextChartDate)\n      .then(returnedChart => {\n        setChartDate(returnedChart[0].date)\n        const filteredEntries = returnedChart[0].entries.filter(entry => entry.position <= length);\n        setChartEntries(filteredEntries)\n      })\n  }\n\n\n  return(\n    <div>\n      <h1>Wrong Generation</h1>\n\n      <InputForm searchChart={searchChart} newDay={newDay} newMonth={newMonth} newYear={newYear} length={length} handleDayChange={handleDayChange} handleMonthChange={handleMonthChange} handleYearChange={handleYearChange} handleLengthChange={handleLengthChange} />\n\n      <h3>Showing Chart Data from {chartDate}</h3>\n\n      <div>\n        {chartEntries.map(entry => \n          <li key={entry.position}>\n            {entry.position}. {entry.song} by {entry.artist}\n          </li>\n        )}\n      </div>\n    \n    </div>\n  );\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}