{"version":3,"sources":["components/InputForm.js","components/Entry.js","components/Entries.js","services/charts.js","App.js","index.js"],"names":["InputForm","searchChart","newDay","newMonth","newYear","length","handleDayChange","handleMonthChange","handleYearChange","handleLengthChange","onSubmit","value","onChange","placeholder","type","Entry","entry","position","song","artist","Entries","chartDate","chartEntries","map","date","axios","get","params","chart_date","then","response","data","App","useState","setChartEntries","setChartDate","setNewDay","setNewMonth","setNewYear","setLength","event","preventDefault","formattedMonth","Number","toLocaleString","minimumIntegerDigits","useGrouping","formattedDay","nextChartDate","dayOfWeek","resultDate","Date","getTime","setDate","getDate","getDay","month","getUTCMonth","day","getUTCDate","String","getUTCFullYear","getNextDayOfWeek","chartService","returnedChart","filteredEntries","entries","filter","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e38f758c.chunk.js","sourcesContent":["import React from 'react';\n\nconst InputForm = ({ searchChart, newDay, newMonth, newYear, length, handleDayChange, handleMonthChange, handleYearChange, handleLengthChange }) => {\n    return(\n        <form onSubmit={searchChart}>\n        <div>\n          Day: <input\n            value={newDay}\n            onChange={handleDayChange}\n            placeholder='dd'\n          />\n        </div>\n        <div>\n          Month: <input\n            value={newMonth}\n            onChange={handleMonthChange}\n            placeholder='mm'\n          />\n        </div>\n        <div>\n          Year: <input\n            value={newYear}\n            onChange={handleYearChange}\n            placeholder='yyyy'\n          />\n        </div>\n        <div>\n          Length: <input\n            value={length}\n            onChange={handleLengthChange}\n            placeholder='1-100'\n          />\n        </div>\n        <div>\n          <button type=\"submit\">search</button>\n        </div>\n      </form>\n    )\n}\n\nexport default InputForm;","import React from 'react';\n\nconst Entry = ({ entry }) => {\n    return (\n        <div>\n            {entry.position}. {entry.song} by {entry.artist}\n        </div>\n    )\n}\n\nexport default Entry;","import React from 'react';\nimport Entry from './Entry';\n\nconst Entries = ({ chartDate, chartEntries }) => {\n    if (chartDate === '') {\n        return null;\n    }\n    return (\n        <div>\n            <h3>Showing Billboard Chart Data from {chartDate}</h3>\n            {chartEntries.map(entry => \n                <Entry key={entry.position} entry={entry} />\n            )}\n        </div>\n    )\n}\n\nexport default Entries;","import axios from 'axios'\nconst baseUrl = '/api/charts'\n\nconst getChart = (date) => {\n    const request = axios.get(baseUrl, { params: { chart_date: date } })\n    return request.then(response => response.data)\n}\n\nexport default { getChart }","import React, { useState } from 'react'\nimport InputForm from './components/InputForm'\nimport Entries from './components/Entries'\nimport chartService from './services/charts'\n\nconst App = () => {\n  const [ chartEntries, setChartEntries ] = useState([])\n  const [ chartDate, setChartDate ] = useState('')\n  const [ newDay, setNewDay ] = useState('');\n  const [ newMonth, setNewMonth ] = useState('');\n  const [ newYear, setNewYear ] = useState('');\n  const [ length, setLength ] = useState('');\n\n  const handleDayChange = (event) => {\n    setNewDay(event.target.value);\n  }\n  const handleMonthChange = (event) => {\n    setNewMonth(event.target.value);\n  }\n  const handleYearChange = (event) => {\n    setNewYear(event.target.value);\n  }\n  const handleLengthChange = (event) => {\n    setLength(event.target.value);\n  }\n\n  const getNextDayOfWeek = (date, dayOfWeek) => {\n    let resultDate = new Date(date.getTime());\n    resultDate.setDate(date.getDate() + (7 + dayOfWeek - date.getDay()) % 7);\n    const month = (resultDate.getUTCMonth() + 1).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping: false});\n    const day = (resultDate.getUTCDate() - 1).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping: false});\n    const year = String(resultDate.getUTCFullYear());\n    const formattedDateString = year + '-' + month + '-' + day;\n    return formattedDateString;\n  }\n\n  const searchChart = (event) => {\n    event.preventDefault();\n    const formattedMonth = (Number(newMonth)).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping: false});\n    const formattedDay = (Number(newDay)).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping: false});\n    const formattedInputDate = new Date(`${newYear}-${formattedMonth}-${formattedDay}`);\n    const nextChartDate = getNextDayOfWeek(formattedInputDate, 6);\n    \n    chartService\n      .getChart(nextChartDate)\n      .then(returnedChart => {\n        setChartDate(returnedChart[0].date)\n        const filteredEntries = returnedChart[0].entries.filter(entry => entry.position <= length);\n        setChartEntries(filteredEntries)\n      })\n  }\n\n\n  return(\n    <div>\n      <h1>Wrong Generation</h1>\n\n      <InputForm \n        searchChart={searchChart} \n        newDay={newDay} newMonth={newMonth} newYear={newYear} length={length} \n        handleDayChange={handleDayChange} handleMonthChange={handleMonthChange} handleYearChange={handleYearChange} handleLengthChange={handleLengthChange} \n      />\n\n      <Entries\n        chartDate={chartDate}\n        chartEntries={chartEntries}\n      />\n\n      \n    \n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}