{"version":3,"sources":["components/InputForm.js","components/Entry.js","components/Entries.js","components/Notification.js","services/charts.js","components/Footer.js","App.js","index.js"],"names":["InputForm","searchChart","newDay","newMonth","newYear","length","handleDayChange","handleMonthChange","handleYearChange","handleLengthChange","onSubmit","class","value","onChange","placeholder","type","positionColStyle","textAlign","fontSize","fontWeight","width","imageColStyle","paddingTop","paddingBottom","Entry","entry","spotifyUri","style","position","src","height","alt","song","artist","trackImg","url","target","rel","href","songUrl","spotify","artistUrl","positionHeaderStyle","titleStyle","Entries","chartDate","chartEntries","map","notificationStyle","color","Notification","message","date","axios","get","params","chart_date","then","response","data","linkStyle","marginLeft","marginRight","Footer","appStyle","margin","aboutStyle","headerStyle","App","useState","setChartEntries","setChartDate","setNewDay","setNewMonth","setNewYear","setLength","setMessage","isValidDate","day","month","year","Number","Date","getUTCFullYear","getUTCMonth","getUTCDate","event","preventDefault","setTimeout","formattedMonth","toLocaleString","minimumIntegerDigits","useGrouping","formattedDay","inputDateString","formattedInputDate","displayDate","toLocaleDateString","nextChartDate","dayOfWeek","resultDate","getTime","setDate","getDate","getDay","String","getNextDayOfWeek","chartService","returnedChart","filteredEntries","filter","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5c6d9d3c.chunk.js","sourcesContent":["import React from 'react';\n\nconst InputForm = ({ searchChart, newDay, newMonth, newYear, length, handleDayChange, handleMonthChange, handleYearChange, handleLengthChange }) => {\n    return(\n      <form onSubmit={searchChart}>\n        <div>\n          <div class='inputFieldStyle'>\n            Date:\n            <input\n              class='shortInputFieldStyle'\n              value={newMonth}\n              onChange={handleMonthChange}\n              placeholder='mm'\n            /> \n            -\n            <input\n              class='shortInputFieldStyle'\n              value={newDay}\n              onChange={handleDayChange}\n              placeholder='dd'\n            />\n            - \n            <input\n              class='yearInputFieldStyle'\n              value={newYear}\n              onChange={handleYearChange}\n              placeholder='yyyy'\n            />\n            Top Songs:\n            <input\n              class='lengthInputFieldStyle'\n              value={length}\n              onChange={handleLengthChange}\n              placeholder='1-100'\n            />\n            <div>\n              <button class='searchButton' type=\"submit\">Get Chart</button>\n            </div>\n            \n          </div>\n        </div>\n      </form>\n    )\n}\n\nexport default InputForm;","import React from 'react';\n\nconst positionColStyle = {\n    textAlign: 'center',\n    fontSize: '18px',\n    fontWeight: 'bold',\n    width: '80px'\n}\n\nconst imageColStyle = {\n    paddingTop: '0px',\n    paddingBottom: '0px',\n}\n\n\n\nconst Entry = ({ entry }) => {\n    if (entry.spotifyUri === null) {\n        return (\n            <tr>\n                <td style={positionColStyle}>{entry.position}</td>\n                <td>\n                    <img \n                        style={imageColStyle}\n                        src={process.env.PUBLIC_URL + '/blank_img.jpg'} \n                        height={72}\n                        width={72} \n                        alt={'blank album cover'}\n                    />\n                </td>\n                <td>{entry.song}</td>\n                <td>{entry.artist}</td>\n            </tr>\n        )\n    }\n    return (\n        <tr>\n            <td style={positionColStyle}>{entry.position}</td>\n            <td>\n                <img \n                    style={imageColStyle}\n                    src={entry.trackImg.url} \n                    height={72} \n                    width={72} \n                    alt={`album cover for ${entry.song}`}\n                />\n            </td>\n            <td>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={entry.songUrl.spotify}>{entry.song}</a>\n            </td>\n            <td>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={entry.artistUrl.spotify}>{entry.artist}</a>\n            </td>\n        </tr>\n    )\n}\n\nexport default Entry;","import React from 'react';\nimport Entry from './Entry';\n\nconst positionHeaderStyle = {\n    textAlign: 'center'\n}\n\nconst titleStyle = {\n    fontSize: '24px'\n}\n\n\nconst Entries = ({ chartDate, chartEntries }) => {\n    if (chartDate === '') {\n        return null;\n    }\n    else {\n        return (\n            <div>\n                <h3 style={titleStyle}>Showing the Top {chartEntries.length} Songs on the Billboard Hot 100 from {chartDate}</h3>\n                <table class='tableStyle'>\n                    <thead>\n                        <tr>\n                            <th style={positionHeaderStyle}>Position</th>\n                            <th></th>\n                            <th>Song</th>\n                            <th>Artist</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {chartEntries.map(entry => \n                            <Entry key={entry.position} entry={entry} />\n                        )}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n}\n\nexport default Entries;","import React from 'react'\n\nconst notificationStyle = {\n  fontSize: '14px',\n  color: 'red',\n  paddingTop: '4px'\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div style={notificationStyle}>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/api/charts'\n//const baseUrl = 'http://localhost:3001/api/charts'\n\nconst getChart = (date, length) => {\n    const request = axios.get(baseUrl, { params: { chart_date: date, length: length } })\n    return request.then(response => response.data)\n}\n\nexport default { getChart }","import React from 'react';\n\nconst linkStyle = {\n    marginLeft: '4px',\n    marginRight: '20px',\n}\n\nconst Footer = () => {\n    return(\n        <footer class='footer'>\n            Created by\n            <a style={linkStyle} target=\"_blank\" rel=\"noopener noreferrer\" href='https://jakeaherron.com/'>Jake Herron</a>\n            Project Code on\n            <a style={linkStyle} target=\"_blank\" rel=\"noopener noreferrer\" href='https://github.com/jakeh524/Wrong-Generation'>Github</a>\n        </footer>\n    )\n}\n\nexport default Footer;","import React, { useState } from 'react'\nimport InputForm from './components/InputForm'\nimport Entries from './components/Entries'\nimport Notification from './components/Notification'\nimport chartService from './services/charts'\nimport Footer from './components/Footer'\n\nconst appStyle = {\n  margin: '0 auto',\n  width: '60%',\n  textAlign: 'center',\n  paddingBottom: '30px',\n}\n\nconst aboutStyle = {\n  fontSize: '16px',\n  margin: '0 auto',\n  paddingBottom: '20px',\n}\n\nconst headerStyle = {\n  fontSize: '42px',\n}\n\nconst App = () => {\n  const [ chartEntries, setChartEntries ] = useState([])\n  const [ chartDate, setChartDate ] = useState('')\n  const [ newDay, setNewDay ] = useState('');\n  const [ newMonth, setNewMonth ] = useState('');\n  const [ newYear, setNewYear ] = useState('');\n  const [ length, setLength ] = useState('');\n  const [ message, setMessage ] = useState(null);\n\n  const handleDayChange = (event) => {\n    setNewDay(event.target.value);\n  }\n  const handleMonthChange = (event) => {\n    setNewMonth(event.target.value);\n  }\n  const handleYearChange = (event) => {\n    setNewYear(event.target.value);\n  }\n  const handleLengthChange = (event) => {\n    setLength(event.target.value);\n  }\n\n  const isValidDate = (day, month, year) => {\n    day = Number(day);\n    month = Number(month) - 1;\n    year = Number(year);\n    let date = new Date(year, month, day);\n\n    if (date.getUTCFullYear() === year && date.getUTCMonth() === month && date.getUTCDate() === day) {\n      return true;\n    }\n    return false;\n  }\n\n  const getNextDayOfWeek = (date, dayOfWeek) => {\n    let resultDate = new Date(date.getTime());\n    resultDate.setDate(date.getDate() + (7 + dayOfWeek - date.getDay()) % 7);\n    const month = (resultDate.getUTCMonth() + 1).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping: false});\n    const day = (resultDate.getUTCDate() - 1).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping: false});\n    const year = String(resultDate.getUTCFullYear());\n    const formattedDateString = year + '-' + month + '-' + day;\n    return formattedDateString;\n  }\n\n  const searchChart = (event) => {\n    event.preventDefault();\n    setMessage('')\n\n    if (isValidDate(newDay, newMonth, newYear) === false) {\n      setMessage('Please enter a valid date.');\n      setChartEntries([]);\n      setChartDate('');\n      setTimeout(() => {\n        setMessage(null)\n      }, 5000)\n    }\n    else if (length < 1 || length > 100) {\n      setMessage('Please choose a length that is between 1 and 100');\n      setChartEntries([]);\n      setChartDate('');\n      setTimeout(() => {\n        setMessage(null)\n      }, 5000)\n    }\n    else if (isValidDate(newDay, newMonth, newYear) === false) {\n      setMessage('Please enter a valid date.');\n      setChartEntries([]);\n      setChartDate('');\n      setTimeout(() => {\n        setMessage(null)\n      }, 5000)\n    }\n    else {\n      const formattedMonth = (Number(newMonth)).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping: false});\n      const formattedDay = (Number(newDay)).toLocaleString('en-US', {minimumIntegerDigits: 2, useGrouping: false});\n      const inputDateString = `${newYear}-${formattedMonth}-${formattedDay}`;\n      const formattedInputDate = new Date(inputDateString);\n      const displayDate = `${formattedInputDate.toLocaleDateString('default', {month: 'long'})} ${formattedDay}, ${newYear}`\n      const nextChartDate = getNextDayOfWeek(formattedInputDate, 6);\n\n      chartService\n      .getChart(nextChartDate, length)\n      .then(returnedChart => {\n        setChartDate(displayDate)\n        const filteredEntries = returnedChart.filter(entry => entry.position <= length);\n        setChartEntries(filteredEntries)\n      })\n      .catch(error => {\n        setMessage('That date is not in our system. Our data goes back to 1962.');\n        setChartEntries([]);\n        setChartDate('');\n        setTimeout(() => {\n          setMessage(null)\n        }, 5000)\n      })\n    }\n    \n\n  }\n\n\n  return(\n    <div class='content'>\n      <div style={appStyle}>\n        <h1 style={headerStyle}>Wrong Generation</h1>\n\n        <div style={aboutStyle}>\n          Do you think the music of today sucks? Was music better when you were born? Maybe you were born in the wrong generation! This app lets you look up the songs charting on the Billboard Hot 100 during any week in history (or at least the last 50 years or so). Find out what songs were trending on your birthday. Or during that important historical moment. Or maybe even when your parents met. ;)\n        </div>\n\n        <InputForm \n          searchChart={searchChart} \n          newDay={newDay} newMonth={newMonth} newYear={newYear} length={length} \n          handleDayChange={handleDayChange} handleMonthChange={handleMonthChange} handleYearChange={handleYearChange} handleLengthChange={handleLengthChange} \n        />\n\n        <Notification message={message} />\n\n        <Entries\n          chartDate={chartDate}\n          chartEntries={chartEntries}\n        />\n\n      </div>\n      <Footer class='footer' />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}